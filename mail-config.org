* Emacs mail
User-related mail info
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "lollivier@baylibre.com")

  (setq message-send-mail-function 'message-send-mail-with-sendmail
        sendmail-program "/usr/bin/msmtp"
        user-full-name "Loys Ollivier")

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+END_SRC

Do Gmail style citation when replying to mails
#+BEGIN_SRC emacs-lisp
  (setq message-citation-line-format "On %a %d %b %Y at %R, %f wrote:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)
#+END_SRC

Fontify cited parts of the mail
#+begin_src emacs-lisp
  (defface mail-cited-0-face
    '((t :inherit font-lock-type-face :bold nil :italic t))
    "Face for cited message parts (level 0)."
    :group 'faces)

  (defface mail-cited-1-face
    '((t :inherit font-lock-keyword-face :bold nil :italic t))
    "Face for cited message parts (level 1)."
    :group 'faces)

  (defface mail-cited-2-face
    '((t :inherit font-lock-comment-face :bold nil :italic t))
    "Face for cited message parts (level 2)."
    :group 'faces)

  (defface mail-cited-3-face
    '((t :inherit font-lock-constant-face :bold nil :italic t))
    "Face for cited message parts (level 3)."
    :group 'faces)

  (defface mail-cited-4-face
    '((t :inherit font-lock-type-face :bold nil :italic t))
    "Face for cited message parts (level 4)."
    :group 'faces)

  (defface mail-cited-5-face
    '((t :inherit font-lock-string-face :bold nil :italic t))
    "Face for cited message parts (level 5)."
    :group 'faces)

  (defface mail-cited-6-face
    '((t :inherit font-lock-variable-name-face :bold nil :italic t))
    "Face for cited message parts (level 6)."
    :group 'faces)

  (defvar mail-cited-regexp
    "^\\(\\([[:alpha:]]+\\)\\|\\( *\\)\\)\\(\\(>+ ?\\)+\\)")

  (defun mail-fontify-cited ()
    (save-excursion
      (message-goto-body)
      (while (re-search-forward mail-cited-regexp nil t)
        (let* ((str (buffer-substring (line-beginning-position)
                                      (point)))
               (level (mod (string-width (replace-regexp-in-string "[^>]" "" str)) 7))
               (face  (unless (zerop level)
                        (intern-soft (format "mail-cited-%d-face" level)))))
          (when face
            (add-text-properties (line-beginning-position)
                                 (line-end-position) `(face ,face)))))))
#+end_src
* Notmuch
There's notmuch to say
#+begin_src emacs-lisp
  (require 'notmuch)
#+end_src

** Refresh management
#+begin_src emacs-lisp
  (load (concat dotspacemacs-directory "Mail/gmi.el") t)
  ;; gmi
  (require 'gmi)
  (setq gmi-verbose 'quiet)

  ;; refresh management with gmi
  (defvar notmuch-hello-buffer "*notmuch-hello*")
  (defvar notmuch-refresh-timer nil)
  ;; 10 minutes refresh period is fine. I do it manually anyway
  (defvar notmuch-refresh-every 600)

  (defun notmuch-fetch-done ()
    (when (get-buffer notmuch-hello-buffer)
      (with-current-buffer notmuch-hello-buffer
        (notmuch-poll-and-refresh-this-buffer)))
    (message "gmi sync done"))
  (add-hook 'gmi-exit-hook #'notmuch-fetch-done)

  (defun notmuch-run-gmi ()
    (interactive)
    (unless (gmi-get-proc)
      (gmi)))
  (define-key notmuch-common-keymap "F" 'notmuch-run-gmi)

  (defun notmuch-refresh-hook ()
    (setq notmuch-refresh-timer (run-at-time 1 notmuch-refresh-every 'notmuch-run-gmi)))
  (add-hook 'notmuch-hello-mode-hook #'notmuch-refresh-hook)

  (defun notmuch-refresh-cancel ()
    (when (string= (buffer-name (current-buffer)) notmuch-hello-buffer)
      (cancel-timer notmuch-refresh-timer)))
  (advice-add 'notmuch-bury-or-kill-this-buffer :before #'notmuch-refresh-cancel)
#+end_src

Query unread mails at point
#+begin_src emacs-lisp
  (defun notmuch-unread-at-point ()
    (interactive)
    (let* ((button (get-char-property (point) 'button))
           (query (plist-get (cdr button) :notmuch-search-terms))
           (unread-query (concat query " and tag:unread")))
      (notmuch-tree unread-query)))

  (define-key notmuch-common-keymap "u" 'notmuch-unread-at-point)

  (defun notmuch-flagged-at-point ()
    (interactive)
    (let* ((button (get-char-property (point) 'button))
           (query (plist-get (cdr button) :notmuch-search-terms))
           (flagged-query (concat query " and tag:flagged")))
      (notmuch-tree flagged-query)))

  (define-key notmuch-common-keymap "f" 'notmuch-flagged-at-point)
#+end_src

** Disable evilification for notmuch
#+begin_src emacs-lisp
  (dolist (mode notmuch-modes)
    (evil-set-initial-state mode 'emacs))
#+end_src

** notmuch-hello
Thanks [[https://github.com/JulienMasson/jm-config][JulienMasson]] for customizing your config for me :D
Create a notmuch-hello page with a list of tags along with
(unread/total) count of mails.
#+begin_src emacs-lisp
  (defcustom notmuch-custom-queries-alist nil
    "Name . query"
    :type '(alist :key-type (string) :value-type (string))
    :group 'notmuch-tree)

  (defface notmuch-custom-header-face
    '((t :inherit font-lock-type-face :bold t))
    "Face for a header in hello section."
    :group 'notmuch-faces)

  (defface notmuch-custom-unread-face
    '((t :inherit font-lock-keyword-face :bold t))
    "Face when we have unread messages."
    :group 'notmuch-faces)

  (defface notmuch-custom-normal-face
    '((t :inherit default))
    "Face when we don't have unread messages."
    :group 'notmuch-faces)


  (defun notmuch-custom-count-query (query)
    (with-temp-buffer
      (insert query "\n")
      (unless (= (call-process-region (point-min) (point-max) notmuch-command
                      t t nil "count" "--batch") 0)
        (notmuch-logged-error "notmuch count --batch failed"))
      (goto-char (point-min))
      (read (current-buffer))))

  (defun notmuch-custom-insert (query-alist)
    (let* ((name (car query-alist))
        (query (cdr query-alist))
        (total (notmuch-custom-count-query query))
        (unread (notmuch-custom-count-query
            (concat query " and tag:unread")))
        (widget-push-button-prefix "")
        (widget-push-button-suffix ""))
      (widget-insert "      ")
      (widget-create 'push-button
              :notify #'notmuch-hello-widget-search
              :notmuch-search-terms query
              :notmuch-search-oldest-first 'newest-first
              :notmuch-search-type 'tree
              (format "%-15s" name))
      (widget-insert (propertize
              (format "(%s/%s)\n" unread total)
              'face (if (> unread 0)
                    'notmuch-custom-unread-face
                  'notmuch-custom-normal-face)))))

  (defun notmuch-insert-custom-header ()
    (widget-insert "\n")
    (widget-insert (propertize "  Baylibre <lollivier@baylibre.com>\n\n" 'face 'notmuch-custom-header-face)))

  (defun notmuch-custom-hello-section ()
    (notmuch-insert-custom-header)
    (mapc #'notmuch-custom-insert notmuch-custom-queries-alist))

  (setq notmuch-hello-sections (list #'notmuch-custom-hello-section))

  (setq notmuch-custom-queries-alist '(("Inbox" . "tag:inbox")
                                       ("Needs Review" . "tag:1_needs-review and not tag:trash")
                                       ("Baylibre" . "tag:Mailing-lists/baylibre-upstreaming and not tag:trash")
                                       ("Amlogic" . "tag:Mailing-lists/linux-kernel/Amlogic and not tag:trash")
                                       ("risc-v" . "tag:Mailing-lists/linux-riscv and not tag:trash")
                                       ("U-Boot" . "tag:Mailing-lists/U-Boot and not tag:trash")
                                       ("Replied" . "tag:replied")))
#+end_src

Edit the FCC folder where notmuch will try to store the sent mails.
#+begin_src emacs-lisp
  (setq notmuch-fcc-dirs nil)
#+end_src

** Tagging keys
Custom tagging keys
#+begin_src emacs-lisp
  (setq notmuch-tagging-keys
        `((,(kbd "a") notmuch-archive-tags "Archive")
          (,(kbd "u") notmuch-show-mark-read-tags "Mark read")
          (,(kbd "f") ("+flagged") "Flag")
          (,(kbd "r") ("-1_needs-review") "Reviewed")
          (,(kbd "s") ("+spam" "-inbox") "Mark as spam")
          (,(kbd "d") ("+trash" "-inbox") "Delete")))

  (setq my-notmuch-discard-tag '("-unread" "+trash"))

  (defun notmuch-search-discard-thread (&optional undiscard beg end)
    "Mark the currently selected thread or region as read and trashed.
  This function advances to the next thread when finished."
    (interactive (cons current-prefix-arg (notmuch-interactive-region)))
    (when my-notmuch-discard-tag
      (notmuch-search-tag
       (notmuch-tag-change-list my-notmuch-discard-tag undiscard) beg end))
    (when (eq beg end)
      (notmuch-search-next-thread)))

  (define-key notmuch-search-mode-map "A" 'notmuch-search-discard-thread)

  (defun notmuch-tree-discard-thread (&optional undiscard)
    "Mark the currently selected thread or region as read and trashed.
    This function advances to the next thread when finished."
    (interactive "P")
    (when my-notmuch-discard-tag
      (notmuch-tree-tag (notmuch-tag-change-list my-notmuch-discard-tag undiscard)))
    (notmuch-tree-next-matching-message))

  (define-key notmuch-tree-mode-map "d" 'notmuch-tree-discard-thread)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (face-spec-set
   'notmuch-tree-match-date-face
   '((t (:inherit font-lock-keyword-face)))
   'face-defface-spec)

  (face-spec-set
   'notmuch-tree-match-author-face
   '((t (:inherit font-lock-type-face)))
   'face-defface-spec)

  (face-spec-set
   'notmuch-tree-match-tag-face
   '((t (:inherit font-lock-base-face)))
   'face-defface-spec)

  (face-spec-set
   'message-header-name
   '((t (:inherit font-lock-keyword-face)))
   'face-defface-spec)
  (face-spec-set
   'message-header-to
   '((t (:inherit font-lock-function-name-face)))
   'face-defface-spec)
  (face-spec-set
   'message-header-cc
   '((t (:inherit font-lock-constant-face)))
   'face-defface-spec)
#+end_src

** Reading mails
Fontify cited parts of the mail
#+begin_src emacs-lisp
  (defun apply-mail-fontify-cited (msg depth)
    (mail-fontify-cited))
  (advice-add 'notmuch-show-insert-msg :after #'apply-mail-fontify-cited)
#+end_src

Remove wash citation (collapse of citation lines) from insert text hook
#+begin_src emacs-lisp
  (setq notmuch-show-insert-text/plain-hook (remove 'notmuch-wash-excerpt-citations
  notmuch-show-insert-text/plain-hook))
#+end_src

Viewing diffs: [[https://github.com/JulienMasson/jm-config/blob/master/emacs/my-mail.el#L96][jm-config]]
#+begin_src emacs-lisp
  (defun apply-minimal-diff-face-buffer ()
    (interactive)
    (save-excursion
      (goto-char (point-max))
      (while (re-search-backward "^diff \-\-git" nil t))
      (while (not (eobp))
        (let* ((start (point))
               (end (line-end-position))
               (str (buffer-substring-no-properties start end))
               (inhibit-read-only t))
          (cond ((string-match "^\\(---\\|\\+\\+\\+\\)" str)
                 (add-face-text-property start end 'diff-file-header))
                ((string-match "^@@" str)
                 (add-face-text-property start end 'diff-header))
                ((string-match "^\\+" str)
                 (add-face-text-property start end 'diff-added))
                ((string-match "^\\-" str)
                 (add-face-text-property start end 'diff-removed)))
          (forward-line)))))
  (add-hook 'notmuch-show-hook #'apply-minimal-diff-face-buffer)
#+end_src

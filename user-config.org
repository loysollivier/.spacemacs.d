* Load path
| Layer                 | Purpose          |
|-----------------------+------------------|
| emacs-bash-completion | Bash completion  |
| acscope               | cscope interface |

#+begin_src emacs-lisp
(let ((default-directory  "~/.spacemacs.d/layers/"))
  (normal-top-level-add-to-load-path '("emacs-bash-completion"))
  (normal-top-level-add-to-load-path '("acscope")))
#+end_src

Better bash completion
#+BEGIN_SRC emacs-lisp
(use-package bash-completion
  :config (bash-completion-setup))
#+END_SRC

Cscope interface: [[https://github.com/JulienMasson/acscope][acscope]]
#+begin_src emacs-lisp
  (use-package acscope
    :config
    (setq acscope-database-fast-symbol t)
    (setq acscope-find-auto-update nil)
    (acscope-global-setup)
    (evil-set-initial-state 'acscope-buffer-mode 'emacs)
  )
#+end_src

* Spacemacs config
Most of my config is kept in org.
Add a shortcut to editing this file.
Needs "my-user-config-file" and "my-mail-config-file" to be set in init.el
#+BEGIN_SRC emacs-lisp
  (defun spacemacs/find-user-config-file ()
    "Edit the org configuration, in the current window."
    (interactive)
    (find-file-existing my-user-config-file))

  (defun spacemacs/find-mail-config-file ()
    "Edit the org configuration, in the current window."
    (interactive)
    (find-file-existing my-mail-config-file))

  (spacemacs/set-leader-keys
    "fef" 'spacemacs/find-user-config-file
    "fem" 'spacemacs/find-mail-config-file
    )
#+END_SRC

Create a rgrep with defaults looking in "all" files recursively in current directory
TODO improve this by using C-u for overriding the files (i.e. look in all, including .git,...)
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'grep-find-ignored-directories ".git")
  (defun my-rgrep-find ()
    (interactive)
    (grep-compute-defaults)
    (let ((regexp (grep-read-regexp))
          (files "* .[!.]* ..?*")
          (dir default-directory))
      (rgrep regexp files dir))
    (switch-to-buffer-other-window "*grep*")
    )

  (spacemacs/set-leader-keys
    "fG" 'my-rgrep-find
    )
#+END_SRC

Make the scratch buffer an org buffer, handy for scratching
#+BEGIN_SRC emacs-lisp
  (setq dotspacemacs-scratch-mode 'org-mode)
#+END_SRC

When using =dotspacemacs-auto-resume-layouts= filter certain type of buffers
#+begin_src emacs-lisp
  (defun my-persp-filter-function (buffer)
    "Filter for buffers that should not be saved/restored in persp."
    (or
     (with-current-buffer buffer
       (memq major-mode '(magit-status-mode magit-log-mode magit-revision-mode
                          magit-process-mode magit-diff-mode)))
     (cl-search "epc con" (buffer-name buffer))))

    (add-to-list 'persp-filter-save-buffers-functions 'my-persp-filter-function)
#+end_src
** window purpose
#+begin_src emacs-lisp
  (use-package window-purpose
    :config
    (dolist (mode '(ag-mode
                    acscope-buffer-mode))
      (add-to-list 'purpose-user-mode-purposes (cons mode 'status)))
    (add-to-list 'purpose-user-regexp-purposes (cons "^magit.*$" 'status))
    (purpose-compile-user-configuration)
    )
#+end_src
* evil
Send escape sequence when using emacs/spacemacs not in graphic mode.
So that the prompt can change from block to line.
#+BEGIN_SRC emacs-lisp
  (add-hook 'evil-insert-state-entry-hook (lambda ()
                                            (when (not (display-graphic-p))
                                              (send-string-to-terminal "\033[5 q"))))
  (add-hook 'evil-normal-state-entry-hook (lambda ()
                                            (when (not (display-graphic-p))
                                              (send-string-to-terminal "\033[0 q"))))
#+END_SRC

Surround stuff:
- [[https://github.com/syl20bnr/spacemacs/issues/7996][How do I surround a visual selection?]]
- https://github.com/emacs-evil/evil-surround
- https://www.reddit.com/r/emacs/comments/4531i9/how_to_efficiently_insert_quotes_parens_or/
* Coding style
Set default indent to "linux"
And insert tabs on indent + set tab width
[[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Sample-Init-File.html#Sample-Init-File][Adapted from doc]]
#+BEGIN_SRC emacs-lisp
  (add-hook 'occur-mode-hook (lambda () (setq truncate-lines t)))

  (defconst loys-c-style
    '((c-basic-offset  . 4)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist . ((brace-list-open)
                                (brace-entry-open)
                                (substatement-open after)
                                (block-close . c-snug-do-while)
                                (arglist-cont-nonempty)))
      (c-cleanup-list . (brace-else-brace))
      (c-offsets-alist . ((statement-block-intro . +)
                          (knr-argdecl-intro     . 0)
                          (substatement-open     . 0)
                          (substatement-label    . 0)
                          (label                 . 0)
                          (statement-cont        . +))))
    "Loys' C Programming Style")
  (c-add-style "loys" loys-c-style)


  (defun my-c-mode-common-hook ()
    (c-set-style "loys")
    (setq tab-width 4
          ;; this will make sure spaces are used instead of tabs
          indent-tabs-mode nil)
    )

  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

  (add-hook 'c-mode-common-hook 'dtrt-indent-mode)
  (add-hook 'python-mode-hook 'dtrt-indent-mode)
  (add-hook 'dts-mode-hook 'dtrt-indent-mode)
  (spacemacs|diminish dtrt-indent-mode " â““" " d")
#+END_SRC
* Magit
Magit changed the variable/arguments handling.
Create a custom var to set my options.
#+BEGIN_SRC emacs-lisp
  (defvar transient-default-values '((magit-commit "--signoff" "--gpg-sign=0x32B3CAA03851CBA8")
                                     (magit-log:magit-log-mode "-n64" "--decorate")
                                     ))
  (setq transient-values transient-default-values)
#+END_SRC

Set line wrapping at 75 columns as suggested by the linux kernel
#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-mode-hook (lambda () (setq fill-column 75)))
#+END_SRC

Custom binding to log only from HEAD to first-tag
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (defun magit-log-from-head-to-last-tag (&optional args files)
    "Show log from `HEAD' to last Tag found."
    (interactive (magit-log-arguments))
    (let ((last-tag (magit-git-string "describe" "--abbrev=0" "--tags")))
      (when last-tag
        (magit-log (list (format "%s..HEAD" last-tag)) args files))))

  (magit-define-popup-action 'magit-log-popup
    ?t "Log from HEAD to last Tag" 'magit-log-from-head-to-last-tag)
#+END_SRC

Custom binding to copy the commit at point in oneline form
#+begin_src emacs-lisp
  (defun magit-copy-commit-at-point (&optional args files)
    "Copy the commit or HEAD at point to the kill-ring"
    (interactive)
    (let ((oneline-commit (magit-git-string
                           "log" "-n1" "--pretty=oneline" "--abbrev-commit"
                           (magit-branch-or-commit-at-point))))
      (when oneline-commit
        (message "%s" (kill-new oneline-commit)))
      )
    )

  (spacemacs/set-leader-keys
    "gy" 'magit-copy-commit-at-point
    )
#+end_src

For big git repositories reduce the information fetched in magit to make magit faster
#+begin_src emacs-lisp
  (defvar magit-blacklist-repo '()
    "list of blacklist repository")

  (defvar magit-blacklist-status-headers-hook
    (remove 'magit-insert-tags-header magit-status-headers-hook)
    "Remove tags header from status headers")

  (defvar magit-blacklist-status-sections-hook
    (seq-filter (lambda (elem)
                  (not (member elem '(magit-insert-unpushed-to-pushremote
                                      magit-insert-unpulled-from-pushremote
                                      magit-insert-unpulled-from-upstream))))
                magit-status-sections-hook)
    "Remove unpushed/unpulled from status section")

  (defun magit-blacklist-filter-hook (hook &rest args)
    (nconc (if (-contains? magit-blacklist-repo (magit-toplevel))
               (cond ((member 'magit-status-sections-hook hook)
                      (cl-replace hook '(magit-blacklist-status-sections-hook)))
                     ((member 'magit-status-headers-hook hook)
                      (cl-replace hook '(magit-blacklist-status-headers-hook)))
                     (t hook))
             hook)
           args))

  (advice-add 'magit-run-section-hook :filter-args #'magit-blacklist-filter-hook)

  (defun magit-blacklist-insert-revision-headers (old-fn &rest args)
    (if (-contains? magit-blacklist-repo (magit-toplevel))
        (let ((magit-revision-insert-related-refs nil))
          (apply old-fn args))
      (apply old-fn args)))

  (advice-add 'magit-insert-revision-headers :around #'magit-blacklist-insert-revision-headers)

  (defun magit-blacklist-branch-or-commit-at-point (old-fn &rest args)
    (if (-contains? magit-blacklist-repo (magit-toplevel))
        (let ((magit-buffer-refname (magit-section-case
                                      (commit (oref it value)))))
          (apply old-fn args))
      (apply old-fn args)))

  (advice-add 'magit-branch-or-commit-at-point :around #'magit-blacklist-branch-or-commit-at-point)
#+end_src

List of repos to blacklist this is appended in secrets file
#+begin_src emacs-lisp
  (add-to-list 'magit-blacklist-repo "")
#+end_src
* Diff-mode
** Whitespace-mode
Disable whitespace mode, otherwise my eyes are bleeding

#+BEGIN_SRC emacs-lisp
  (remove-hook 'diff-mode-hook 'whitespace-mode)
#+END_SRC
 
* Shell
Set default shell to =shell=
#+BEGIN_SRC emacs-lisp
  (setq shell-default-shell 'shell)
  (setq shell-default-position 'bottom)
#+END_SRC

Terminal - Don't ask for confirmation to kill buffer
#+BEGIN_SRC emacs-lisp
  (defun set-no-process-query-on-exit ()
    (let ((proc (get-buffer-process (current-buffer))))
      (when (processp proc)
        (set-process-query-on-exit-flag proc nil))))

  (add-hook 'shell-mode-hook 'set-no-process-query-on-exit)
  (add-hook 'term-exec-hook 'set-no-process-query-on-exit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  ;; interpret and use ansi color codes in shell output windows
  (ansi-color-for-comint-mode-on)

  ;; Shell add compilation-shell-minor-mode as a minor mode
  (add-hook 'comint-mode-hook 'compilation-shell-minor-mode)

  ;; Terminal - Jump to end of buffer disabled
  (setq comint-move-point-for-output nil)

  ;; Do not override the PS1 prompt colors in shell mode
  (add-hook 'shell-mode-hook
            (lambda ()
              (set-face-attribute 'comint-highlight-prompt nil
                                  :inherit nil)))

  ;; When pressing RET don't send input but go to latest prompt
  (defun my-comint-send-input-maybe ()
    "Only `comint-send-input' when point is after the latest prompt.

  Otherwise move to the end of the buffer."
    (interactive)
    (let ((proc (get-buffer-process (current-buffer))))
      (if (and proc (>= (point) (marker-position (process-mark proc))))
          (comint-send-input)
        (goto-char (point-max)))))

  (with-eval-after-load "comint"
    (define-key shell-mode-map [remap comint-send-input] 'my-comint-send-input-maybe))

#+END_SRC

Replace Helm completion-at-point by company completion
Bind it to TAB in shell mode
Add the company-capf backend to shell mode
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'shell-mode-hook 'company-mode)
  (define-key shell-mode-map (kbd "TAB") #'company-manual-begin)
  (spacemacs|add-company-backends :backends company-capf :modes shell-mode)
#+END_SRC

Use Emacs as the default editor for shell (module owned by magit)
#+BEGIN_SRC emacs-lisp
  (require 'with-editor)
  (add-hook 'shell-mode-hook 'with-editor-export-editor)
#+END_SRC

Set shell initial state to emacs
#+begin_src emacs-lisp
  (evil-set-initial-state 'shell-mode 'emacs)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src

Reduce bash completion timeout to 0.5sec
#+begin_src emacs-lisp
  (setq bash-completion-process-timeout 0.5)
#+end_src
* Org mode
Hard line wrap at 90 chars, looks good on most on my displays, half screen
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'spacemacs/toggle-auto-fill-mode-on)
  (add-hook 'org-mode-hook (lambda () (setq fill-column 90)))
#+END_SRC

[[https://orgmode.org/manual/Clean-view.html][Cleaner outline view]] - auto indent under outlines
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

If a org heading contains the tag =:newpage:= then automatically insert a clearpage when
exporting to LaTeX/PDF
- TODO improve it, make it mandatory for highest headings
- TODO fix it does not work on startup, needs to require probably
#+BEGIN_SRC emacs-lisp
  (defun org/get-headline-string-element  (headline backend info)
    (let ((prop-point (next-property-change 0 headline)))
      (if prop-point (plist-get (text-properties-at prop-point headline) :parent))))

  (defun org/ensure-latex-clearpage (headline backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (let ((elmnt (org/get-headline-string-element headline backend info)))
        (when (member "newpage" (org-element-property :tags elmnt))
          (concat "\\clearpage\n" headline)))))

  (with-eval-after-load 'ox
    (add-to-list 'org-export-filter-headline-functions
                 'org/ensure-latex-clearpage))
#+END_SRC

purpose-mode which is a minor mode required by spacemacs
is messing with =org-insert-structure-template=.
Disable it when in org-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (purpose-mode -1)))
#+end_src
** org theme
Greenish org tables are nicer :)
#+begin_src emacs-lisp
  (set-face-attribute 'org-table nil :foreground "#008787")
#+end_src
** Expansion style
See a downward pointing arrow instead of the usual
(=...=) that org displays when there's stuff under the header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â¤µ")
#+END_SRC

** =TODO= states
From [[https://orgmode.org/manual/Tracking-TODO-state-changes.html][ORG mode doc]], change the TODO states to:
`TODO`, `WAIT`, `DONE`, `CANCELED`
With some nifty timestamps.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC
** org-capture
#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/Notes")
  (setq org-default-notes-file (concat org-directory "/LOYS-inbox.org"))
  (setq org-agenda-files (list (concat org-directory "/LOYS-TODO.org")))
#+end_src
* Python
Set the Python interpreter to Python3
Anacomda-mode is not happy if Python2 is not installed
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "/usr/bin/python3")
#+END_SRC

Turn on fill-column-indicator by default for Python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'fci-mode)
#+END_SRC

Flycheck setup (needs syntax-checking layer)
To toggle flycheck ON-OFF use =SPC t s= (OFF by default)
#+begin_src emacs-lisp
  (setq flycheck-python-pycompile-executable "/usr/bin/python3")
  (setq flycheck-python-flake8-executable "/usr/bin/python3")
  (setq flycheck-python-pylint-executable "/usr/bin/python3")
#+end_src

Disable importmagic by default
#+begin_src emacs-lisp
  (remove-hook 'python-mode-hook 'importmagic-mode)
#+end_src

* Dired
When pressing "^" in dired move up one directory in same buffer
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "^")
                (lambda () (interactive)(find-alternate-file "..")))))
#+END_SRC

Move a file/folder to the current dired buffer
#+begin_src emacs-lisp
  (defun my-move-to-last-dired (file)
    (interactive "GMove file or directory:")
    (let ((dired-buffer (seq-filter (lambda (buffer)
                                      (with-current-buffer buffer
                                        (string= major-mode "dired-mode")))
                                    (buffer-list))))
      (when dired-buffer
        (with-current-buffer (car dired-buffer)
          (rename-file file default-directory)))))
  (add-hook 'dired-mode-hook (lambda ()
                               (define-key dired-mode-map (kbd "C-f") #'my-move-to-last-dired)))
#+end_src
* gnus
Apparently it's best to leave the primary select method nil
And only use secondary select methods for news and stuff.
#+BEGIN_SRC emacs-lisp
  (setq gnus-secondary-select-methods
        '(
          (nntp "nntp.lore.kernel.org")
          ))
#+END_SRC

Load some read message - default behavior is to load only unread.
Annoying in thread view.
#+begin_src emacs-lisp
  (setq gnus-fetch-old-headers 'some)
#+end_src

* projectile
Started playing around with projectile.
Flow for working on a new project is the following:
- SPC p p - helm-projectile-switch-project
- SPC p e - projectile-edit-dir-locals
  - Set vars: projectile-project-compilation-cmd (and others projectile-project-*)
- SPC p c - projectile-compile-project (might need a reload of =.dir-loacls.el= - use dired for this)

make the projectile compilation command safe to use.
#+BEGIN_SRC emacs-lisp
  (put 'projectile-project-compilation-cmd 'safe-local-variable #'stringp)
  (put 'dired-omit-files 'safe-local-variable #'stringp)
  (put 'dired-omit-mode 'safe-local-variable #'booleanp)
#+END_SRC

Switch to the compilation buffer on compilation
#+begin_src emacs-lisp
  (defun switch-to-comp (arg)
    (switch-to-buffer-other-window "*compilation*"))
  (advice-add 'projectile-compile-project :after #'switch-to-comp)
#+end_src

Find file in project
#+begin_src emacs-lisp
  (defun my-projectile-find-file-in-current-directory ()
    (interactive)
    (projectile-find-file-in-directory default-directory))

  (spacemacs/set-leader-keys
    "fF" 'my-projectile-find-file-in-current-directory
    )
#+end_src
* Emacs
Launch server on startup if not already running
#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

Delete a word when using =C-<backspace>= instead of killing it (copy to kill-ring)
#+begin_src  emacs-lisp
  (defun backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
    With argument ARG, do this that many times."
    (interactive "p")
    (delete-region (point) (progn (backward-word arg) (point))))

  (global-set-key (kbd "C-<backspace>") 'backward-delete-word)
#+end_src

Why this does not exist by default ?
Maybe my flow is broken ?
Kill current buffer and go to other window.
#+begin_src emacs-lisp
  (defun my-kill-this-buffer-go-to-other-window()
    (interactive)
    (kill-this-buffer)
    (other-window 1)
    )

  (spacemacs/set-leader-keys
    "bk" 'my-kill-this-buffer-go-to-other-window
    )

  (global-set-key (kbd "C-x O") 'my-kill-this-buffer-go-to-other-window)
#+end_src

Toggle window split
#+begin_src emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (let ((split (frame-parameter nil 'unsplittable)))
    (set-frame-parameter nil 'unsplittable (not split))
    (message "Window %sunsplittable."
             (if split "no longer " "")
             (buffer-name))
    ))

(spacemacs/set-leader-keys
  "wT" 'toggle-window-split
  )
#+end_src
* Deft
#+begin_src emacs-lisp
  (setq deft-directory "~/Dropbox/Notes")
  (setq deft-recursive t)
#+end_src
* ag
Enable highlighting because it's nice
Reuse the =*ag search*= buffer instead of creating new ones.
#+begin_src emacs-lisp
(use-package ag
  :config
  (setq ag-highlight-search t)
  (setq ag-reuse-buffers t)
)
#+end_src

Search for string in default-directory (current-path)
and switch to this buffer on result
#+begin_src emacs-lisp
  (defun my-ag (str &optional dir)
    (interactive (list (ag/read-from-minibuffer "Search string")))
    (let ((dir (or dir (or (projectile-project-root) default-directory))))
      (message dir)
      (ag str dir)
      (switch-to-buffer-other-window "*ag search*")))
  (defun my-ag-default-dir (str)
    (interactive (list (ag/read-from-minibuffer "Search string")))
    (my-ag str default-directory))

  (spacemacs/set-leader-keys
    "sag" 'my-ag
    "saG" 'my-ag-default-dir
    )
#+end_src
* lisp funcs
Browse url at point with firefox
#+begin_src emacs-lisp
  (defun my-browse-url-firefox-at-point()
    (interactive)
    (browse-url-firefox (thing-at-point 'url))
    )

  (spacemacs/set-leader-keys
    "jU" 'my-browse-url-firefox-at-point
    )
#+end_src
* Secrets
or actually path and other stuff that people doesn't need to know about
#+begin_src emacs-lisp
  (load (concat dotspacemacs-directory "secrets/secrets.el") t)
#+end_src
* Helm
#+begin_src emacs-lisp
  (customize-set-variable 'helm-ff-lynx-style-map t)
  (customize-set-variable 'helm-imenu-lynx-style-map t)
  (customize-set-variable 'helm-semantic-lynx-style-map t)
  (customize-set-variable 'helm-occur-use-ioccur-style-keys t)
  (customize-set-variable 'helm-grep-use-ioccur-style-keys t)
#+end_src
* Pass
#+begin_src emacs-lisp
(use-package password-store
  :init (spacemacs/set-leader-keys
          "ay" 'password-store-copy))
#+end_src
